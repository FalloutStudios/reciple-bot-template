"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerInteractionCommands = void 0;
/**
 * Register interaction commands
 */
function registerInteractionCommands(client, cmds, overwriteGuilds) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const commands = (_a = Object.values(cmds !== null && cmds !== void 0 ? cmds : client.commands.INTERACTION_COMMANDS).map(c => {
            var _a, _b, _c, _d;
            if (typeof c.toJSON == 'undefined')
                return c;
            const cmd = c;
            if ((cmd === null || cmd === void 0 ? void 0 : cmd.builder) === 'INTERACTION_COMMAND' && client.config.commands.interactionCommand.setRequiredPermissions) {
                const permissions = (_d = (((_a = client.config.permissions) === null || _a === void 0 ? void 0 : _a.interactionCommands.enabled) ?
                    (_c = (_b = client.config.permissions) === null || _b === void 0 ? void 0 : _b.interactionCommands.commands.find(cmd_ => cmd_.command.toLowerCase() === cmd.name.toLowerCase())) === null || _c === void 0 ? void 0 : _c.permissions :
                    undefined)) !== null && _d !== void 0 ? _d : cmd.requiredBotPermissions;
                cmd.setRequiredMemberPermissions(permissions);
                client.commands.INTERACTION_COMMANDS[cmd.name] = cmd;
                if (client.isClientLogsEnabled())
                    client.logger.debug(`Set required permissions for ${cmd.name}`);
                return cmd.toJSON();
            }
            return c.toJSON();
        })) !== null && _a !== void 0 ? _a : [];
        const configGuilds = overwriteGuilds !== null && overwriteGuilds !== void 0 ? overwriteGuilds : client.config.commands.interactionCommand.guilds;
        const guilds = typeof configGuilds === 'object' ? configGuilds : [configGuilds];
        if (!guilds || !(guilds === null || guilds === void 0 ? void 0 : guilds.length)) {
            (_b = client.application) === null || _b === void 0 ? void 0 : _b.commands.set(commands).then(() => {
                if (client.isClientLogsEnabled())
                    client.logger.warn('No guilds were specified for interaction commands. Registered interaction commands globally.');
            });
        }
        else {
            if (client.isClientLogsEnabled())
                client.logger.warn(`Registering ${commands.length} interaction commands to ${guilds.length} guild(s).`);
            for (const guild of guilds) {
                if (!guild)
                    continue;
                (_c = client.application) === null || _c === void 0 ? void 0 : _c.commands.set(commands, guild).then(() => {
                    if (client.isClientLogsEnabled())
                        client.logger.warn(`Registered ${commands.length} interaction command(s) for ${guild}.`);
                });
            }
        }
    });
}
exports.registerInteractionCommands = registerInteractionCommands;
