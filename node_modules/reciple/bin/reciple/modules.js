"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadModules = void 0;
const fs_1 = require("fs");
const version_1 = require("./version");
const wildcard_match_1 = __importDefault(require("wildcard-match"));
const path_1 = __importDefault(require("path"));
/**
 * Load modules from folder
 */
function loadModules(client, folder) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const response = { commands: [], modules: [] };
        const modulesDir = client.config.modulesFolder || folder || './modules';
        if (!(0, fs_1.existsSync)(modulesDir))
            (0, fs_1.mkdirSync)(modulesDir, { recursive: true });
        const ignoredFiles = (client.config.ignoredFiles || []).map(file => file.endsWith('.js') ? file : `${file}.js`);
        const scripts = (0, fs_1.readdirSync)(modulesDir).filter(file => {
            return file.endsWith('.js') && (!file.startsWith('_') && !file.startsWith('.')) && !ignoredFiles.some(f => (0, wildcard_match_1.default)(f)(file));
        });
        for (const script of scripts) {
            const modulePath = path_1.default.join(process.cwd(), modulesDir, script);
            const commands = [];
            let module_;
            try {
                const reqMod = require(modulePath);
                module_ = typeof (reqMod === null || reqMod === void 0 ? void 0 : reqMod.default) != 'undefined' ? reqMod.default : reqMod;
                if (!((_a = module_.versions) === null || _a === void 0 ? void 0 : _a.length))
                    throw new Error('Module does not have supported versions.');
                const versions = typeof module_.versions === 'object' ? module_.versions : [module_.versions];
                if (!versions.some(v => (0, version_1.isSupportedVersion)(v, version_1.version)))
                    throw new Error((_b = 'Module versions is not defined or unsupported; supported versions: ' + module_.versions) !== null && _b !== void 0 ? _b : 'none' + '; current version: ' + version_1.version);
                if (!(yield Promise.resolve(module_.onStart(client))))
                    throw new Error(script + ' onStart is not defined or returned false.');
                if (module_.commands) {
                    for (const command of module_.commands) {
                        if (command.builder === 'MESSAGE_COMMAND' || command.builder === 'INTERACTION_COMMAND')
                            commands.push(command);
                    }
                }
            }
            catch (error) {
                if (client.isClientLogsEnabled()) {
                    client.logger.error(`Failed to load module ${script}`);
                    client.logger.error(error);
                }
                continue;
            }
            response.commands.push(...commands.filter((c) => {
                if (!c.name) {
                    if (client.isClientLogsEnabled())
                        client.logger.error(`A ${c.builder} command name is not defined in ${script}`);
                    return false;
                }
                if (c.builder === 'MESSAGE_COMMAND' && c.options.length && c.options.some(o => !o.name)) {
                    if (client.isClientLogsEnabled())
                        client.logger.error(`A ${c.builder} option name is not defined in ${script}`);
                    return false;
                }
                return true;
            }));
            response.modules.push({
                script: module_,
                info: {
                    filename: script,
                    versions: typeof module_.versions === 'string' ? [module_.versions] : module_.versions,
                    path: modulePath
                }
            });
            if (client.isClientLogsEnabled())
                client.logger.info(`Loaded module ${script}`);
        }
        return response;
    });
}
exports.loadModules = loadModules;
