"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandCooldownManager = void 0;
class CommandCooldownManager extends Array {
    /**
     * Alias for `CommandCooldownManager#push()`
     */
    add(...options) {
        return this.push(...options);
    }
    /**
     * Remove cooldown from specific user, channel or guild
     */
    remove(options, limit = 0) {
        if (!Object.keys(options).length)
            throw new TypeError('Provide atleast one option to remove cooldown data.');
        let i = 0;
        for (const index in this) {
            if (!CommandCooldownManager.checkOptions(options, this[index]))
                continue;
            if (options.expireTime && this[index].expireTime > Date.now())
                continue;
            if (limit && i >= limit)
                continue;
            this.splice(Number(index));
            i++;
        }
    }
    /**
     * Check if the given user is cooled-down
     */
    isCooledDown(options) {
        const data = this.get(options);
        if (!data)
            return false;
        this.remove(Object.assign(Object.assign({}, data), { channel: undefined, guild: undefined, type: undefined, command: undefined }));
        if (data.expireTime < Date.now())
            return false;
        return true;
    }
    /**
     * Clear non cooled-down users from this array
     */
    clean(options) {
        for (const index in this) {
            if (options && !CommandCooldownManager.checkOptions(options, this[index]))
                return;
            if (this[index].expireTime > Date.now())
                return;
            this.slice(Number(index));
        }
    }
    /**
     * Get someone's cooldown data
     */
    get(options) {
        return this.find(data => CommandCooldownManager.checkOptions(options, data));
    }
    /**
     * Check if the options are valid
     */
    static checkOptions(options, data) {
        var _a, _b;
        if ((options === null || options === void 0 ? void 0 : options.user) && options.user.id !== data.user.id)
            return false;
        if ((options === null || options === void 0 ? void 0 : options.guild) && options.guild.id !== ((_a = data.guild) === null || _a === void 0 ? void 0 : _a.id))
            return false;
        if ((options === null || options === void 0 ? void 0 : options.channel) && options.channel.id !== ((_b = data.channel) === null || _b === void 0 ? void 0 : _b.id))
            return false;
        if ((options === null || options === void 0 ? void 0 : options.command) && options.command !== data.command)
            return false;
        if ((options === null || options === void 0 ? void 0 : options.type) && options.type !== data.type)
            return false;
        return true;
    }
}
exports.CommandCooldownManager = CommandCooldownManager;
