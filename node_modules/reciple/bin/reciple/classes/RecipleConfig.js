"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecipleConfig = void 0;
const fs_1 = require("fs");
const version_1 = require("../version");
const fallout_utility_1 = require("fallout-utility");
const flags_1 = require("../flags");
const path_1 = __importDefault(require("path"));
const yaml_1 = __importDefault(require("yaml"));
class RecipleConfig {
    constructor(configPath) {
        this.configPath = './reciple.yml';
        if (!configPath)
            throw new Error('Config path is not defined');
        this.configPath = configPath;
    }
    /**
     * Parse the config file
     */
    parseConfig() {
        var _a;
        if (!(0, fs_1.existsSync)(this.configPath)) {
            const defaultConfigPath = RecipleConfig.defaultConfigPath;
            if (!(0, fs_1.existsSync)(defaultConfigPath))
                throw new Error('Default Config file not found. Please reinstall Reciple.');
            const defaultConfig = (0, fallout_utility_1.replaceAll)((0, fs_1.readFileSync)(defaultConfigPath, 'utf-8'), 'VERSION', version_1.version);
            (0, fs_1.writeFileSync)(this.configPath, defaultConfig, 'utf-8');
            if (!(0, fs_1.existsSync)(this.configPath))
                throw new Error('Failed to create config file.');
            this.config = yaml_1.default.parse(defaultConfig);
            if (this.config && this.config.token === 'TOKEN') {
                this.config.token = this.askToken() || this.config.token;
                (0, fs_1.writeFileSync)(this.configPath, (0, fallout_utility_1.replaceAll)(defaultConfig, ' TOKEN', ` ${this.config.token}`), 'utf-8');
            }
            return this;
        }
        if (!(0, fs_1.existsSync)(this.configPath))
            throw new Error('Failed to read config file.');
        const config = (0, fs_1.readFileSync)(this.configPath, 'utf-8');
        this.config = yaml_1.default.parse(config);
        if (!this.isSupportedConfig())
            throw new Error('Unsupported config version. Your config version: ' + (((_a = this.config) === null || _a === void 0 ? void 0 : _a.version) || 'No version specified.') + ', Reciple version: ' + version_1.version);
        return this;
    }
    /**
     * Returns the parsed config file
     */
    getConfig() {
        if (!this.config)
            throw new Error('Config is not parsed.');
        this.config.token = this.parseToken() || 'TOKEN';
        return this.config;
    }
    /**
     * Parse token from config
     */
    parseToken(askIfNull = true) {
        var _a, _b;
        let token = flags_1.token || null;
        if (!this.config && !token)
            return token;
        if (this.config && !((_a = this.config) === null || _a === void 0 ? void 0 : _a.token) && !token)
            return token || (askIfNull ? this.askToken() : null);
        token = token || ((_b = this.config) === null || _b === void 0 ? void 0 : _b.token) || null;
        if (!token)
            return token;
        const envToken = token.toString().split(':');
        if (envToken.length === 2 && envToken[0].toLocaleLowerCase() === 'env' && envToken[1]) {
            token = process.env[envToken[1]] || null;
        }
        return token || (askIfNull ? this.askToken() : null);
    }
    /**
     * Check if the config version is supported
     */
    isSupportedConfig() {
        var _a;
        return (0, version_1.isSupportedVersion)(((_a = this.config) === null || _a === void 0 ? void 0 : _a.version) || '0.0.0', version_1.version);
    }
    /**
     * Ask for a token
     */
    askToken() {
        return flags_1.token || (0, fallout_utility_1.input)({ 'text': 'Bot Token >>> ', echo: '*', repeatIfEmpty: true, exitStrings: ['exit', 'quit', ''], sigint: true }) || null;
    }
    /**
     * Get default config
     */
    static getDefaultConfig() {
        if (!(0, fs_1.existsSync)(this.defaultConfigPath))
            throw new Error("Default config file does not exists.");
        return yaml_1.default.parse((0, fs_1.readFileSync)(this.defaultConfigPath, 'utf-8'));
    }
}
exports.RecipleConfig = RecipleConfig;
RecipleConfig.defaultConfigPath = path_1.default.join(__dirname, '../../../resource/reciple.yml');
