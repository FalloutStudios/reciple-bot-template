import { ClientOptions, PermissionResolvable } from 'discord.js';
export interface ConfigCommandPermissions {
    command: string;
    permissions: PermissionResolvable[];
}
export interface Config {
    token: string;
    prefix: string;
    commands: {
        messageCommand: {
            enabled: boolean;
            replyOnError: boolean;
            allowCommandAlias: boolean;
            enableCooldown: boolean;
            commandArgumentSeparator: string;
        };
        interactionCommand: {
            enabled: boolean;
            replyOnError: boolean;
            registerCommands: boolean;
            enableCooldown: boolean;
            setRequiredPermissions: boolean;
            guilds: string[] | string;
        };
    };
    permissions: {
        messageCommands: {
            enabled: boolean;
            commands: ConfigCommandPermissions[];
        };
        interactionCommands: {
            enabled: boolean;
            commands: ConfigCommandPermissions[];
        };
    };
    ignoredChannels: {
        enabled: boolean;
        convertToAllowList: boolean;
        channels: string[];
    };
    fileLogging: {
        enabled: boolean;
        debugmode: boolean;
        clientLogs: boolean;
        stringifyLoggedJSON: boolean;
        logFilePath: string;
    };
    client: ClientOptions;
    messages: {
        [messageKey: string]: any;
    };
    ignoredFiles: string[];
    modulesFolder: string;
    version: string;
}
export declare class RecipleConfig {
    config?: Config;
    configPath: string;
    static defaultConfigPath: string;
    constructor(configPath: string);
    /**
     * Parse the config file
     */
    parseConfig(): RecipleConfig;
    /**
     * Returns the parsed config file
     */
    getConfig(): Config;
    /**
     * Parse token from config
     */
    parseToken(askIfNull?: boolean): string | null;
    /**
     * Check if the config version is supported
     */
    private isSupportedConfig;
    /**
     * Ask for a token
     */
    private askToken;
    /**
     * Get default config
     */
    static getDefaultConfig(): Config;
}
