import { MessageCommandOptionBuilder } from './MessageCommandOptionBuilder';
import { MessageCommandOptionManager } from '../MessageCommandOptionManager';
import { Awaitable, Message, PermissionResolvable } from 'discord.js';
import { RecipleHaltedCommandData } from '../../types/commands';
import { Command as CommandMessage } from 'fallout-utility';
import { RecipleClient } from '../RecipleClient';
export interface RecipleMessageCommandExecuteData {
    message: Message;
    options: MessageCommandOptionManager;
    command: CommandMessage;
    builder: MessageCommandBuilder;
    client: RecipleClient<true>;
}
export interface MessageCommandValidatedOption {
    name: string;
    value: string | undefined;
    required: boolean;
    invalid: boolean;
    missing: boolean;
}
export declare class MessageCommandBuilder {
    readonly builder = "MESSAGE_COMMAND";
    name: string;
    cooldown: number;
    description: string;
    aliases: string[];
    options: MessageCommandOptionBuilder[];
    validateOptions: boolean;
    requiredBotPermissions: PermissionResolvable[];
    RequiredUserPermissions: PermissionResolvable[];
    allowExecuteInDM: boolean;
    allowExecuteByBots: boolean;
    halt?: (haltData: RecipleHaltedCommandData<MessageCommandBuilder>) => Awaitable<boolean>;
    execute: (executeData: RecipleMessageCommandExecuteData) => void;
    /**
     * Sets the command name
     */
    setName(name: string): MessageCommandBuilder;
    /**
     * Sets the command description
     */
    setDescription(description: string): MessageCommandBuilder;
    /**
     * Sets the execute cooldown for this command.
     * - `0` means no cooldown
     */
    setCooldown(cooldown: number): MessageCommandBuilder;
    /**
     * Add aliases to the command
     */
    addAliases(...aliases: string[]): MessageCommandBuilder;
    /**
     * Set required per
     */
    setRequiredBotPermissions(...permissions: PermissionResolvable[]): MessageCommandBuilder;
    /**
     * Set required user permissions to execute the command
     */
    setRequiredMemberPermissions(...permissions: PermissionResolvable[]): MessageCommandBuilder;
    /**
     * Set if command can be executed in dms
     */
    setAllowExecuteInDM(allowExecuteInDM: boolean): MessageCommandBuilder;
    /**
     * Allow command to be executed by bots
     */
    setAllowExecuteByBots(allowExecuteByBots: boolean): MessageCommandBuilder;
    /**
     * Function when the command is interupted before execution
     */
    setHalt(halt?: (haltData: RecipleHaltedCommandData<MessageCommandBuilder>) => Awaitable<boolean>): MessageCommandBuilder;
    /**
     * Function when the command is executed
     */
    setExecute(execute: (executeData: RecipleMessageCommandExecuteData) => void): MessageCommandBuilder;
    /**
     * Add option to the command
     */
    addOption(option: MessageCommandOptionBuilder | ((constructor: MessageCommandOptionBuilder) => MessageCommandOptionBuilder)): MessageCommandBuilder;
    /**
     * Validate options before executing
     */
    setValidateOptions(validateOptions: boolean): MessageCommandBuilder;
    /**
     * validate given command options
     */
    getCommandOptionValues(options: CommandMessage): MessageCommandValidatedOption[];
}
