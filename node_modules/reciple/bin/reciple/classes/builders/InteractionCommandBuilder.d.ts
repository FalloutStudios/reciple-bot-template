import { Awaitable, CommandInteraction, PermissionResolvable } from 'discord.js';
import { RecipleHaltedCommandData } from '../../types/commands';
import { SlashCommandBuilder } from '@discordjs/builders';
import { RecipleClient } from '../RecipleClient';
export interface RecipleInteractionCommandExecuteData {
    interaction: CommandInteraction;
    builder: InteractionCommandBuilder;
    client: RecipleClient<true>;
}
export declare class InteractionCommandBuilder extends SlashCommandBuilder {
    readonly builder = "INTERACTION_COMMAND";
    cooldown: number;
    requiredBotPermissions: PermissionResolvable[];
    RequiredUserPermissions: PermissionResolvable[];
    allowExecuteInDM: boolean;
    halt?: (haltData: RecipleHaltedCommandData<InteractionCommandBuilder>) => Awaitable<boolean>;
    execute: (executeData: RecipleInteractionCommandExecuteData) => Awaitable<void>;
    /**
     * Sets the execute cooldown for this command.
     * - `0` means no cooldown
     */
    setCooldown(cooldown: number): InteractionCommandBuilder;
    /**
     * Set required permissions to execute the command
     */
    setRequiredMemberPermissions(...permissions: PermissionResolvable[]): InteractionCommandBuilder;
    /**
     * Function when the command is interupted before execution
     */
    setHalt(halt?: (haltData: RecipleHaltedCommandData<InteractionCommandBuilder>) => Awaitable<boolean>): InteractionCommandBuilder;
    /**
     * Function when the command is executed
     */
    setExecute(execute: (executeData: RecipleInteractionCommandExecuteData) => void): InteractionCommandBuilder;
}
