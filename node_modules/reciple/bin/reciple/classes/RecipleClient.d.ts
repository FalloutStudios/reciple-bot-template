import { InteractionCommandBuilder, RecipleInteractionCommandExecuteData } from './builders/InteractionCommandBuilder';
import { MessageCommandBuilder, RecipleMessageCommandExecuteData } from './builders/MessageCommandBuilder';
import { InteractionBuilder } from '../registerInteractionCommands';
import { RecipleCommandBuilders } from '../types/builders';
import { CommandCooldownManager } from './CommandCooldownManager';
import { RecipleModule, RecipleScript } from '../modules';
import { Logger as ILogger } from 'fallout-utility';
import { Config } from './RecipleConfig';
import { ApplicationCommandDataResolvable, Awaitable, Client, ClientEvents, ClientOptions, CommandInteraction, Interaction, Message } from 'discord.js';
export interface RecipleClientOptions extends ClientOptions {
    config?: Config;
}
export interface RecipleClientCommands {
    MESSAGE_COMMANDS: {
        [commandName: string]: MessageCommandBuilder;
    };
    INTERACTION_COMMANDS: {
        [commandName: string]: InteractionCommandBuilder;
    };
}
export interface RecipleClientEvents extends ClientEvents {
    recipleMessageCommandCreate: [executeData: RecipleMessageCommandExecuteData];
    recipleInteractionCommandCreate: [executeData: RecipleInteractionCommandExecuteData];
    recipleReplyError: [error: unknown];
}
export interface RecipleClient<Ready extends boolean = boolean> extends Client<Ready> {
    on<E extends keyof RecipleClientEvents>(event: E, listener: (...args: RecipleClientEvents[E]) => Awaitable<void>): this;
    on<E extends string | symbol>(event: Exclude<E, keyof RecipleClientEvents>, listener: (...args: any) => Awaitable<void>): this;
    once<E extends keyof RecipleClientEvents>(event: E, listener: (...args: RecipleClientEvents[E]) => Awaitable<void>): this;
    once<E extends keyof string | symbol>(event: Exclude<E, keyof RecipleClientEvents>, listener: (...args: any) => Awaitable<void>): this;
    emit<E extends keyof RecipleClientEvents>(event: E, ...args: RecipleClientEvents[E]): boolean;
    emit<E extends string | symbol>(event: Exclude<E, keyof RecipleClientEvents>, ...args: any): boolean;
    off<E extends keyof RecipleClientEvents>(event: E, listener: (...args: RecipleClientEvents[E]) => Awaitable<void>): this;
    off<E extends string | symbol>(event: Exclude<E, keyof RecipleClientEvents>, listener: (...args: any) => Awaitable<void>): this;
    removeAllListeners<E extends keyof RecipleClientEvents>(event?: E): this;
    removeAllListeners(event?: string | symbol): this;
    isReady(): this is RecipleClient<true>;
}
export declare class RecipleClient<Ready extends boolean = boolean> extends Client<Ready> {
    config: Config;
    commands: RecipleClientCommands;
    otherApplicationCommandData: (InteractionBuilder | ApplicationCommandDataResolvable)[];
    commandCooldowns: CommandCooldownManager;
    modules: RecipleModule[];
    logger: ILogger;
    version: string;
    constructor(options: RecipleClientOptions);
    /**
     * Load modules
     */
    startModules(folder?: string): Promise<RecipleClient<Ready>>;
    /**
     * Execute `onLoad()` from client modules and register interaction commands if enabled
     */
    loadModules(): Promise<RecipleClient<Ready>>;
    /**
     * Add module
     */
    addModule(script: RecipleScript, registerCommands?: boolean, info?: RecipleModule['info']): Promise<void>;
    /**
     * Add interaction or message command to client
     */
    addCommand(command: RecipleCommandBuilders): RecipleClient<Ready>;
    /**
     * Listed to command executions
     */
    addCommandListeners(): RecipleClient<Ready>;
    /**
     * Execute a Message command
     */
    messageCommandExecute(message: Message, prefix?: string): Promise<void | RecipleMessageCommandExecuteData>;
    /**
     * Execute an Interaction command
     */
    interactionCommandExecute(interaction: Interaction | CommandInteraction): Promise<void | RecipleInteractionCommandExecuteData>;
    /**
     * Get a message from config
     */
    getMessage<T = unknown>(messageKey: string, defaultMessage?: T): T;
    /**
     * Get command builder by name or alias if it's a message command
     */
    findCommand(command: string, type: MessageCommandBuilder["builder"]): MessageCommandBuilder | undefined;
    findCommand(command: string, type: InteractionCommandBuilder["builder"]): InteractionCommandBuilder | undefined;
    /**
     * Returns true if client logs is enabled
     */
    isClientLogsEnabled(): boolean;
    /**
     * Emits the "recipleReplyError" event
     */
    private _replyError;
    /**
     * Error message when a command fails to execute
     */
    private _commandExecuteError;
}
