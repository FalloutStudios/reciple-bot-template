"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSupportedVersion = exports.parseVersion = exports.isValidVersion = exports.version = void 0;
const semver_1 = __importDefault(require("semver"));
/**
 * Current reciple version
 */
exports.version = `${semver_1.default.coerce(require('../../package.json').version)}`;
/**
 * Check if the version is valid
 */
function isValidVersion(ver) {
    return semver_1.default.valid(semver_1.default.coerce(ver)) !== null;
}
exports.isValidVersion = isValidVersion;
/**
 * Parse the version string
 */
function parseVersion(ver) {
    var _a, _b;
    if (!isValidVersion(ver))
        throw new TypeError(`Invalid version: ${ver}`);
    const [major, minor, patch] = (_b = (_a = `${semver_1.default.coerce(ver)}`) === null || _a === void 0 ? void 0 : _a.split('.')) !== null && _b !== void 0 ? _b : [];
    return { major: parseInt(major), minor: parseInt(minor), patch: parseInt(patch) };
}
exports.parseVersion = parseVersion;
/**
 * Check if the given version is supported by the given version range
 */
function isSupportedVersion(versionRange, supportedVersion) {
    supportedVersion = supportedVersion || exports.version;
    if (!isValidVersion(versionRange))
        throw new TypeError(`Invalid version: ${versionRange}`);
    if (!isValidVersion(supportedVersion))
        throw new TypeError(`Invalid supported version: ${supportedVersion}`);
    return semver_1.default.satisfies(supportedVersion, versionRange);
}
exports.isSupportedVersion = isSupportedVersion;
