/// <reference types="node" />
import * as fs from 'fs';
export interface OptionsPrefixInsterface {
    /**
     * Prefix to add to the log messages
     */
    enabled: boolean;
    /**
     * First bracket char
     */
    startBracket: string;
    /**
     * End bracket char
     */
    endBracket: string;
    /**
     * Prefix and level strings separator
     */
    separator: string;
    /**
     * Level names
     */
    levels: string[];
}
export interface OptionsInterface {
    /**
     * Log messages prefix options
     */
    prefix?: OptionsPrefixInsterface;
    /**
     * Stringify objects when printing to console
     */
    stringifyJSON?: boolean;
    /**
     * Adds log prefix to JSON new lines (\n) in the log file
     */
    addPrefixToEveryJsonNewLines?: boolean;
    /**
     * Custom write stream
     */
    writeStream?: fs.WriteStream;
    /**
     * Set debug mode
     */
    setDebugging?: boolean;
    /**
     * Colorize logged string
     */
    colorizeStringLog?: boolean;
}
/**
 * Levels
 */
export declare type LevelNumbers = 0 | 1 | 2 | 3;
export declare class Logger {
    options: OptionsInterface;
    defaultPrefix?: string;
    writeStream: fs.WriteStream | undefined;
    debugging: boolean;
    constructor(defaultPrefix?: string, options?: OptionsInterface);
    /**
     *
     * Log to file
     */
    logFile(logFilePath: string, overwriteOldFile?: boolean): Logger;
    /**
     *
     * Sets the current write stream
     */
    setWriteStream(writeStream: fs.WriteStream): Logger;
    /**
     *
     * Creates new logger
     */
    cloneLogger(): Logger;
    setDebugging(debugging: boolean): Logger;
    /**
     *
     * Remove write stream
     */
    stopLogWriteStream(): Logger;
    private parseLogHeader;
    /**
     *
     * Print message to console
     */
    log(args: any, setPrefix?: string | undefined): void;
    /**
     *
     * Print message to console
     */
    info(args: any, setPrefix?: string | undefined): void;
    /**
     *
     * Print warn message to console
     */
    warn(args: any, setPrefix?: string | undefined): void;
    /**
     *
     * Print error message to console
     */
    error(args: any, setPrefix?: string | undefined): void;
    /**
     *
     * Print a debug message to console only if the debug mode is enabled
     */
    debug(args: any, setPrefix?: string | undefined): void;
    private parseLogMessage;
    private writeLog;
    private getPrefix;
    private writeToStream;
    private colorize;
    static isDebugging(): boolean;
    private static print;
}
