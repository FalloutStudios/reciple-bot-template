/// <reference types="node" />
import * as fs from 'fs';
export interface LoggerOptions {
    prefixes?: {
        [level: number]: (loggerName?: string) => string;
    };
    colorMessages?: {
        [level: number]: (message: string) => string;
    };
    stringifyJSON?: boolean;
    addPrefixToAllNewLines?: boolean;
    writeStream?: fs.WriteStream;
    enableDebugMode?: boolean;
}
export declare enum LogLevels {
    INFO = 0,
    WARN = 1,
    ERROR = 2,
    DEBUG = 3
}
export declare class Logger {
    options: LoggerOptions;
    loggerName?: string;
    protected temporaryPrefix?: string;
    writeStream?: fs.WriteStream;
    enableDebugMode: boolean;
    constructor(options?: LoggerOptions & {
        loggerName?: string;
    });
    info(...message: string[]): void;
    err(...message: string[]): void;
    log(...message: any[]): void;
    warn(...message: any[]): void;
    error(...message: any[]): void;
    debug(...message: any[]): void;
    cloneLogger(options?: LoggerOptions & {
        loggerName?: string;
    }): Logger;
    logFile(fileName: string, overwriteOldFile?: boolean): Logger;
    setWriteStream(writeStream: fs.WriteStream): void;
    stopLogWriteStream(): void;
    setEnableDebugMode(enable: boolean): void;
    private parseLogHeader;
    private createLogHeader;
    private parseLogMessage;
    private writeLog;
    private print;
    static isDebugging(): boolean;
}
